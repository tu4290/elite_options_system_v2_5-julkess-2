"""
Pydantic models defining contextual information used across the EOTS v2.5 system.
These schemas help in tailoring analysis based on ticker-specific characteristics,
market events, or time-based conditions.
"""
from enum import Enum
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any


class MarketRegimeState(str, Enum):
    """Market regime states for the expert system.
    
    Attributes:
        BULLISH_TREND: Sustained upward price movement
        BEARISH_TREND: Sustained downward price movement
        SIDEWAYS: No clear trend, price oscillating in a range
        VOLATILITY_EXPANSION: Increasing price volatility
        VOLATILITY_CONTRACTION: Decreasing price volatility
        BULLISH_REVERSAL: Potential reversal from downtrend to uptrend
        BEARISH_REVERSAL: Potential reversal from uptrend to downtrend
        DISTRIBUTION: Smart money distributing positions
        ACCUMULATION: Smart money accumulating positions
        CAPITULATION: Panic selling
        EUPHORIA: Extreme bullish sentiment
        PANIC: Extreme bearish sentiment
        CONSOLIDATION: Price moving in a tight range
        BREAKOUT: Price breaking out of a range
        BREAKDOWN: Price breaking down from a range
        CHOPPY: Erratic price action
        TRENDING: Clear directional movement
        RANGE_BOUND: Price contained within support/resistance
    """
    BULLISH_TREND = "bullish_trend"
    BEARISH_TREND = "bearish_trend"
    SIDEWAYS = "sideways"
    VOLATILITY_EXPANSION = "volatility_expansion"
    VOLATILITY_CONTRACTION = "volatility_contraction"
    BULLISH_REVERSAL = "bullish_reversal"
    BEARISH_REVERSAL = "bearish_reversal"
    DISTRIBUTION = "distribution"
    ACCUMULATION = "accumulation"
    CAPITULATION = "capitulation"
    EUPHORIA = "euphoria"
    PANIC = "panic"
    CONSOLIDATION = "consolidation"
    BREAKOUT = "breakout"
    BREAKDOWN = "breakdown"
    CHOPPY = "choppy"
    TRENDING = "trending"
    RANGE_BOUND = "range_bound"

class TickerContextDictV2_5(BaseModel):
    """
    Holds various contextual flags and states specific to the ticker being analyzed,
    generated by TickerContextAnalyzerV2_5. This information is used by other
    system components (MRE, Metrics Calculator, ATIF) to adapt their logic.
    """
    is_0dte: Optional[bool] = Field(None, description="True if current day is a 0 DTE (Days To Expiration) day for the active symbol.")
    is_1dte: Optional[bool] = Field(None, description="True if current day is a 1 DTE day for the active symbol.")
    is_spx_mwf_expiry_type: Optional[bool] = Field(None, description="Flags specific SPX Monday/Wednesday/Friday expiration types.")
    is_spy_eom_expiry: Optional[bool] = Field(None, description="Flags if it's an SPY End-of-Month expiration.")
    is_quad_witching_week_flag: Optional[bool] = Field(None, description="Flags if the current week is a quadruple witching week.")
    days_to_nearest_0dte: Optional[int] = Field(None, description="Number of calendar days to the nearest 0DTE event for the symbol.")
    days_to_monthly_opex: Optional[int] = Field(None, description="Number of calendar days to the next standard monthly options expiration.")

    # Event-based context
    is_fomc_meeting_day: Optional[bool] = Field(None, description="True if the current day is an FOMC meeting day.")
    is_fomc_announcement_imminent: Optional[bool] = Field(None, description="True if an FOMC announcement is expected shortly (e.g., within a specific time window).")
    post_fomc_drift_period_active: Optional[bool] = Field(None, description="True if within the typical post-FOMC announcement drift period.")

    # Behavioral pattern flags (examples)
    vix_spy_price_divergence_strong_negative: Optional[bool] = Field(None, description="Example: True if VIX is up strongly while SPY is also up, indicating unusual divergence.")
    
    # Intraday session context
    active_intraday_session: Optional[str] = Field(None, description="Current intraday session (e.g., 'OPENING_RUSH', 'LUNCH_LULL', 'POWER_HOUR', 'EOD_AUCTION').")
    is_near_auction_period: Optional[bool] = Field(None, description="True if current time is near market open or close auction periods.")

    # General ticker characteristics
    ticker_liquidity_profile_flag: Optional[str] = Field(None, description="General liquidity assessment for the ticker (e.g., 'High', 'Medium', 'Low', 'Illiquid').")
    ticker_volatility_state_flag: Optional[str] = Field(None, description="Assessment of the ticker's current volatility character (e.g., 'IV_HIGH_RV_LOW', 'IV_CRUSH_IMMINENT').")
    
    # Earnings context (for equities)
    earnings_approaching_flag: Optional[bool] = Field(None, description="True if an earnings announcement is imminent for the stock (e.g., within a week).")
    days_to_earnings: Optional[int] = Field(None, description="Number of calendar days to the next scheduled earnings announcement.")

    class Config:
        extra = 'forbid' # Internal model, structure should be strictly defined


class TimeOfDayDefinitions(BaseModel):
    """
    Defines critical time points for market operations and EOTS v2.5 internal logic,
    such as determining intraday sessions or when to perform EOD calculations.
    These are typically loaded from system configuration.
    """
    market_open: str = Field(default="09:30:00", description="Market open time in HH:MM:SS format (e.g., '09:30:00').")
    market_close: str = Field(default="16:00:00", description="Market close time in HH:MM:SS format (e.g., '16:00:00').")
    pre_market_start: str = Field(default="04:00:00", description="Pre-market start time in HH:MM:SS format.")
    after_hours_end: str = Field(default="20:00:00", description="After hours end time in HH:MM:SS format.")
    eod_pressure_calc_time: str = Field(default="15:00:00", description="Time to trigger end-of-day pressure calculations (e.g., HP_EOD) in HH:MM:SS format.")
    # Add other specific time definitions as needed, e.g., for intraday session boundaries
    # opening_rush_end: str = Field(default="10:15:00", description="End of 'Opening Rush' session.")
    # lunch_lull_start: str = Field(default="12:00:00", description="Start of 'Lunch Lull' session.")
    # lunch_lull_end: str = Field(default="13:30:00", description="End of 'Lunch Lull' session.")
    # power_hour_start: str = Field(default="15:00:00", description="Start of 'Power Hour' session.")

    class Config:
        extra = 'forbid' # Configuration model, structure should be strictly defined
